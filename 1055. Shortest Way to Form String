Method 1:

class Solution {
    public int shortestWay(String source, String target) {
        int count = 1, startIdx = 0, len = target.length(), i = 0;
        
        while (i < len)
        {
            char c = target.charAt(i);
            int idx = source.indexOf(c, startIdx);
            
            if (idx == -1)
            {
                // The "c" does not exist in source
                if (startIdx == 0)
                    return -1;
                
                // If not found, start from origin again and "count++"
                count++;
                startIdx = 0;
            }
            else
            {
                startIdx = idx + 1;
                i++;
            }
        }
        return count;
    }
}
/*
        // Find every char of target in source
        // The "startIdx" is from the next position of the previous "idx"

*/


Method 2:

Take source = "xyz", target = "xzyxa" for example:

x z
 y
x z

If we read following rows top-down, target is formed.
the minimum number of subsequences of source such that their concatenation equals target means for each loop of source, we match characters of target in order as more as possible. If there is no matches when target is not concatenated successfully, we return -1.

class Solution {
    public int shortestWay(String source, String target) {
        int index = 0, result = 0;

        
        while(index < target.length()){
            boolean match = false;
            for(int i = 0; i < source.length() && index < target.length(); i++){
                if(source.charAt(i) == target.charAt(index)){
                    index++;
                }
                match = true;
            }
            
            if(!match) return -1;
            result++;
        }
        
        return result;
    }
}
