method 1: two point

class Solution {
    public String minRemoveToMakeValid(String s) {
        char[] cs = s.toCharArray();
        int n = s.length(), count = 0; // number of '('
        for (int i = 0; i < n; i++) {
            if (cs[i] == '(') {
                count++;
            }
            else if (cs[i] == ')') {
                if (count == 0) cs[i] = '#'; // To be removed
                else count--;
            }
        }

        // number of '(' can be removed
        if (count > 0) {
            for (int i = n-1; i >= 0; i--) {
                if (count == 0) break;
                if (cs[i] == '(') {
                    cs[i] = '#'; // To be removed
                    count--;
                }
            }
        }

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            if (cs[i] != '#') sb.append(cs[i]); // remove
        }

        return sb.toString();
    }
}


method 2: stack
class Solution {
    public String minRemoveToMakeValid(String s) {
        if(s.length() == 0) return "";
        
        Stack<Integer> stack = new Stack<>();
        StringBuilder str = new StringBuilder();
        
        char[] array = s.toCharArray();
        
        for(int i = 0; i < s.length(); i++){
            if(array[i] == '(') stack.push(i);
            if(array[i] == ')'){
                if(stack.isEmpty()){
                    array[i] = ' ';
                } else {
                    stack.pop();
                }
            }
        }
        
        while(!stack.isEmpty()) array[stack.pop()] = ' ';
        
        for(int i = 0; i < s.length(); i++){
            if(array[i] != ' ') str.append(array[i]);
        }
        
        return str.toString();
        
    }
}




921	Minimum Add to Make Parentheses Valid

class Solution {
    public int minAddToMakeValid(String S) {
        if(S.length() == 0){
            return 0;
        }
        
        int ans = 0, bal = 0;
        for (int i = 0; i < S.length(); ++i) {
            bal += S.charAt(i) == '(' ? 1 : -1;
            // It is guaranteed bal >= -1
            if (bal == -1) {
                ans++;
                bal++;
            }
        }

        return ans + bal;
    }
}
