https://leetcode.com/problems/n-queens-ii/

import java.util.*;
import java.lang.*;

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;



class Solution {
    public static void main(String args[] ) throws Exception {
        System.out.print(totalNQueens(4));
    }
    static int result;
    public static int totalNQueens(int n) {
        result = 0;
        // Array to hold current positions of queens
        // queensArray[i] => Index of queen in row i
        int[] queensArray = new int[n];
        //Initialize array
        Arrays.fill(queensArray, -1);
        // backtrack method to find all possible solutions.
        nQueens(0, queensArray, n);
        return result;
    }
    public static void nQueens(int row, int[] queensArray, int n) {
        //We have already placed n queens. Increment result.
        if(row == n) {
            result++;
            return;
        }
        // Find next valid placement
        for(int i = 0; i < n; i++) {
            if(isValidPlacement(row, i, queensArray)){
                queensArray[row] = i;
                // Once we find a valid placement, look for a valid placement in next row.
                nQueens(row+1, queensArray, n);
                //backtrack
                queensArray[row] = -1;
            }
        }
    }

    // Return true if a queen can be placed in "index" of "row".
    public static boolean isValidPlacement(int row, int index, int[] queensArray) {
        // It should be enough to check the placements until row - 1.
        for(int i = 0; i < row; i++) {
            int placedIndex = queensArray[i];
            int difference = row - i;
            // check if a queen was placed in same column or diagonal ( \ ) or diagonal ( / ).
            if(placedIndex == index || placedIndex == index - difference || placedIndex == index + difference) {
                return false;
            }
        }
        return true;
    }
}
