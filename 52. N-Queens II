https://leetcode.com/problems/n-queens-ii/

class Solution {
    int result;
    public int totalNQueens(int n) {
        result = 0;
        int[] queenArray = new int[n];  //queenArray[i] = 1, 3, 0, 2
        Arrays.fill(queenArray,  -1);
        dfs(0, queenArray, n);
        return result;
    }
    
    private void dfs(int row, int[] queenArray, int n){
        if(row == n){
            result++;
            return;
        }
        
        for(int i = 0; i < n; i++){
            if(valid(row, i, queenArray)){
                queenArray[row] = i;
                dfs(row+1, queenArray, n);
                queenArray[row] = -1;
            }
        }
    }
    
    private boolean valid(int row, int col, int[] queenArray){
        for(int i = 0; i < row; i++){
            int placeIndex = queenArray[i];
            int different = row - i;
            if(placeIndex == col || placeIndex == col - different || placeIndex == col + different) return false;
        }
        return true;
    }
}
