class Trie {

    class TrieNode{
      TrieNode[] child;
      boolean isWord;
       TrieNode(){
        child = new TrieNode[26];
        isWord = false;
      }
    }
  
  TrieNode root = new TrieNode();
      
    /** Inserts a word into the trie. */
    public void insert(String word) {
      TrieNode t = root;
      for(char c : word.toCharArray()){
        if(t.child[c - 'a'] == null){
          t.child[c - 'a'] = new TrieNode();
        }
        t = t.child[c - 'a'];
      }
      t.isWord = true;        
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
      TrieNode t = root;
      for(char c : word.toCharArray()){
        if(t.child[c - 'a'] == null){
          return false;
        }
        t = t.child[c - 'a'];
      }
      return t.isWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
      TrieNode t = root;
      for(char c : prefix.toCharArray()){
        if(t.child[c - 'a'] == null){
          return false;
        }
        t = t.child[c - 'a'];
      }
      return true;  
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
