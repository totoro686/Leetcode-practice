104	Maximum Depth of Binary Tree  



111. Minimum Depth of Binary Tree

BFS

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int minDepth(TreeNode root) {
        if(root == null) return 0;
        int minLevel = 0, level = 0;
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        
        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0; i < size; i++){
                TreeNode node = q.poll();
                if(node.left == null && node.right == null){
                    minLevel = level+1;                    
                    break;
                }
                if(node.left != null) q.add(node.left);
                if(node.right != null) q.add(node.right);
            }
            if(minLevel != 0) break;
            level++;
        }
        return minLevel;
    }
}

DFS
Preorder:
class Solution {
    int minDepth = Integer.MAX_VALUE;
    public int minDepth(TreeNode root) {
        if (root == null) return 0;
        walk(root, 0);
        return minDepth;
    }
    
    private void walk(TreeNode node, int depth) {
        depth++;
        if(node.left == null && node.right == null) {
            minDepth = Math.min(depth, minDepth);
            return;
        }
        if(node.left != null ) walk(node.left, depth);
        if(node.right != null) walk(node.right, depth);
    }
}

PostOrder:

public int minDepth(TreeNode root) {
        if(root == null){
            return 0;
        }
        
        int left = minDepth(root.left);
        int right = minDepth(root.right);
        
        return (left ==0 || right == 0) ? left + right + 1: Math.min(left, right) + 1;
        
    }
