class Solution {
    Map<Integer, Integer> map = new HashMap<>(); // save as <islands_id, count>.
    public int largestIsland(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int id = 1;
        int maxArea = 1;
		// use dfs find number of islands.
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    id++;
                    dfs(grid, i, j, m, n, id);
                    maxArea = Math.max(maxArea, map.get(id));
                }
            }
        }
		// find islands around '0' , and update max area.
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    int sum = 1;
                    for (int nei : neighbors(grid, i, j, m, n)) {
                        if (map.containsKey(nei)) {
                            sum += map.get(nei);
                        }
                    }
                    maxArea = Math.max(maxArea, sum);
                }
            }
        }
        return maxArea;
    }

    private Set<Integer> neighbors(int[][] grid, int i, int j, int m, int n) {
        Set<Integer> set = new HashSet<>();
        if (i - 1 >= 0) set.add(grid[i - 1][j]);
        if (i + 1 < m) set.add(grid[i + 1][j]);
        if (j - 1 >= 0) set.add(grid[i][j - 1]);
        if (j + 1 < n) set.add(grid[i][j + 1]);
        return set;
    }

    private void dfs(int[][] grid, int i, int j, int m, int n, int id) {
        if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == 0 || grid[i][j] == id) return;
        grid[i][j] = id;
        map.put(id, map.getOrDefault(id, 0) + 1);
        dfs(grid, i - 1, j, m, n, id);
        dfs(grid, i + 1, j, m, n, id);
        dfs(grid, i, j - 1, m, n, id);
        dfs(grid, i, j + 1, m, n, id);
    }
}
