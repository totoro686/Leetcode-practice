class Solution {
    public void solve(char[][] board) {
        if(board.length == 0) return;
        
        int row = board.length, col = board[0].length;
        
        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){
                if(i == 0 || i == row-1 || j == 0 || j == col-1){
                    if(board[i][j] == 'O'){
                        dfs(board, row, col, i, j);
                    }                   
                }
            }
        }
        
        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){
                if(board[i][j] == '*'){
                    board[i][j] = 'O';
                } else {
                    board[i][j] = 'X';
                }
            }
        }
    }
    
    private void dfs(char[][] board, int row, int col, int i, int j){
        if(i < 0 || i >= row || j <  0 || j >= col || board[i][j] == '*' || board[i][j] == 'X') return;
        
        board[i][j] = '*';
        
        dfs(board, row, col, i+1, j);
        dfs(board, row, col, i-1, j);
        dfs(board, row, col, i, j+1);
        dfs(board, row, col, i, j-1);
    }
}
