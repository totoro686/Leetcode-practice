class Solution {
    public boolean validPalindrome(String s) {
        if(s == null) return true;
        int l = 0, r = s.length()-1;
        
        while(l < r){
            if(s.charAt(l) != s.charAt(r)){
                return isPali(s, l+1, r) || isPali(s, l, r-1);
            }
            l++;
            r--;
        }
        
        return true;
    }
    
    private boolean isPali(String s, int l, int r){
        while(l < r){
            if(s.charAt(l) != s.charAt(r)){
                return false;                
            }
            l++;
            r--;
        }
        return true;        
    }
}




methid 2:
class Solution {
    public boolean validPalindrome(String s) {
        if(s == null) return true;
        int i = 0, j = s.length() - 1;
        
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) {
                return isPalindrome(s, i + 1, j) || isPalindrome(s, i, j - 1);
            }
            i++;
            j--;
        }

        return true;
    }
    
    /* Check is s[i...j] is palindrome. */
    private boolean isPalindrome(String s, int i, int j) {
        
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        
        return true;
    }
}
