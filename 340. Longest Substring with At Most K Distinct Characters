// 340. Longest Substring with At Most K Distinct Characters

// Share
// Given a string s and an integer k, return the length of the longest substring of s that contains at most k distinct characters.

 

// Example 1:

// Input: s = "eceba", k = 2
// Output: 3
// Explanation: The substring is "ece" with length 3.
// Example 2:

// Input: s = "aa", k = 1
// Output: 2
// Explanation: The substring is "aa" with length 2.
 

// Constraints:

// 1 <= s.length <= 5 * 104
// 0 <= k <= 50

class Solution {
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        int length = s.length();
        if(length == 0) return 0;
        
        int[] count = new int[256];     // there are 256 ASCII characters in the world
    
        int i = 0;  // i will be behind j
        int num = 0;
        int res = 0;

        for (int j = 0; j < length; j++) {
            if (count[s.charAt(j)]++ == 0) {    // if count[s.charAt(j)] == 0, we know that it is a distinct character
                num++;
            }
            while (num > k && i < length) {     // sliding window
                count[s.charAt(i)]--;
                if (count[s.charAt(i)] == 0){ 
                    num--;
                }
                i++;
            }
            res = Math.max(res, j - i + 1);
        }
        return res;
    }
}
