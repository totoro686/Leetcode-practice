Method 1: DFS

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<TreeNode> heads = new ArrayList<>();
    Set<Integer> set = new HashSet<>();
    public List<TreeNode> delNodes(TreeNode root, int[] d) {
        for (int i : d){
            set.add(i);
        }
        dfs(root, true);
        return heads;
    }
    
    private boolean dfs(TreeNode node, boolean head) {
        if (node == null) return false;
        boolean del = set.contains(node.val);
        if (head && !del) {
            heads.add(node);
        }
        if (dfs(node.left, del)) node.left = null;
        if (dfs(node.right, del)) node.right = null;
        return del;
    }
}



Method 2: BFS
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {
        Set<Integer> set = new HashSet<>();
        for (int num : to_delete){
            set.add(num);
        }
        List<TreeNode> res = new LinkedList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        res.add(root);
        queue.offer(root);
        while (!queue.isEmpty()){
            TreeNode node = queue.poll();
            if (set.contains(node.val)){
                res.remove(node);
                if (node.left != null) res.add(node.left);
                if (node.right != null) res.add(node.right);
            }
            if (node.left != null){
                queue.offer(node.left);
                if (set.contains(node.left.val)){
                    node.left = null;
                }
            }
            if (node.right != null){
                queue.offer(node.right);
                if (set.contains(node.right.val)){
                    node.right = null;
                }
            }
        }
        return res;
    }
}
