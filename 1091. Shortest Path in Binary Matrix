Method 1: no extra space

class Solution {
    private int[][] dir = {{0,1},{0,-1},{1,0},{-1,0},{1,-1},{-1,1},{-1,-1},{1,1}};
    public int shortestPathBinaryMatrix(int[][] grid) {
        int row = grid.length, col = grid[0].length, res = 0;
        if(grid[0][0] == 1 || grid[row-1][col-1] == 1) return -1;
        
        Queue<int[]> q = new LinkedList<>();
     //   boolean[][] visit = new boolean[row][col];
     //   visit[0][0] = true;
        q.add(new int[]{0, 0});
        
        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0; i < size; i++){
                int[] curr = q.remove();
                if(curr[0] == row-1 && curr[1] == col-1){
                    return res+1;
                }
                
                for(int j = 0; j < 8; j++){
                    int x = curr[0] + dir[j][0];
                    int y = curr[1] + dir[j][1];
                    
                    if(x >= 0 && x < row && y >= 0 && y < col && grid[x][y] != 2 && grid[x][y] == 0){
                        q.add(new int[]{x, y});
                        grid[x][y] = 2;
                    }
                }
            }
            res++;
        }
        
        return -1;
        
    }
}


Method 2: extra space
class Solution {
    private int[][] dir = {{0,1},{0,-1},{1,0},{-1,0},{1,-1},{-1,1},{-1,-1},{1,1}};
    public int shortestPathBinaryMatrix(int[][] grid) {
        int row = grid.length, col = grid[0].length, res = 0;
        if(grid[0][0] == 1 || grid[row-1][col-1] == 1) return -1;
        
        Queue<int[]> q = new LinkedList<>();
        boolean[][] visit = new boolean[row][col];
        visit[0][0] = true;
        q.add(new int[]{0, 0});
        
        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0; i < size; i++){
                int[] curr = q.remove();
                if(curr[0] == row-1 && curr[1] == col-1){
                    return res+1;
                }
                
                for(int j = 0; j < 8; j++){
                    int x = curr[0] + dir[j][0];
                    int y = curr[1] + dir[j][1];
                    
                    if(x >= 0 && x < row && y >= 0 && y < col && !visit[x][y] && grid[x][y] == 0){
                        q.add(new int[]{x, y});
                        visit[x][y] = true;
                    }
                }
            }
            res++;
        }
        
        return -1;
        
    }
}
