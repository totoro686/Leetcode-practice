method 1: quick select

class Solution {
    public int findKthLargest(int[] nums, int k) {
      return quickSelect(nums, 0, nums.length - 1, k);
    }

    private int quickSelect(int[] nums, int low, int high, int k) {
      int pivot = low;

      // use quick sort's idea
      // put nums that are <= pivot to the left
      // put nums that are  > pivot to the right
      for (int i = low; i < high; i++) {
        if (nums[i] <= nums[high]) {
          swap(nums, pivot, i);
            pivot++;
        }
      }
      swap(nums, pivot, high);

      // count the nums that are > pivot from high
      int count = high - pivot + 1;
      // pivot is the one!
      if (count == k) return nums[pivot];
      // pivot is too small, so it must be on the right
      if (count > k) return quickSelect(nums, pivot + 1, high, k);
      // pivot is too big, so it must be on the left
      return quickSelect(nums, low, pivot - 1, k - count);
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}


method 2: priorityqueue:
class Solution {
    public int findKthLargest(int[] nums, int k) {
        if(nums.length == 0) return 0;
        PriorityQueue<Integer> q = new PriorityQueue<>();
        
        for(int i = 0; i < nums.length; i++){
            q.add(nums[i]);
            if(q.size() > k){
                q.poll();
            }
        }
        
        return q.poll();
    }
}


method 3: sort
class Solution {
    public int findKthLargest(int[] nums, int k) {
        Arrays.sort(nums);
        return nums[nums.length - k];
    }
}

