method 1: quick select DFS

// [3,1,4,5,6]

class Solution {
    public int findKthLargest(int[] nums, int k) {
        return quickSelect(nums, 0, nums.length - 1, k);
    }
    
    private int quickSelect(int[] nums, int left, int right, int k){
        int pivot = left;
        
        for(int i = left; i < right; i++){
            if(nums[i] <= nums[right]){
                if(pivot != i){
                    swap(nums, pivot, i);
                }
                pivot++;
            }            
        }
        swap(nums, pivot, right);
        
        int count = right - pivot + 1;
        if(count == k){
            return nums[pivot];
        } else if(count > k) {
            return quickSelect(nums, pivot + 1, right, k);
        } else {
            return quickSelect(nums, left, pivot - 1, k - count);
        }
        
    }
    
    private void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}

method 2: quick select non-dfs

class Solution {
     public int findKthLargest(int[] nums, int k) {
        int start = 0, end = nums.length - 1, index = end - k + 1;
        while (start < end) {
            int pivot = partition(nums, start, end);

            if (pivot == index)
                return nums[index];
            else if (pivot < index)
                start = pivot + 1;
            else
                end =  pivot - 1;
        }
        return nums[start];
         
    }
    
    private int partition(int[] nums, int start, int end){
        int pivot = start;
        while(start <= end){
            while(start <= end && nums[start] <= nums[pivot]) start++;
            while(start <= end && nums[end] > nums[pivot]) end--;
            if(start > end) break;
            swap(nums, start, end);
        }
        swap(nums, pivot, end);
        return end;
    }
    
    private void swap(int[] nums, int a, int b) {
        int temp = nums[a];
        nums[a] = nums[b];
        nums[b] = temp;
    }
}

method 2: priorityqueue:
class Solution {
    public int findKthLargest(int[] nums, int k) {
        if(nums.length == 0) return 0;
        PriorityQueue<Integer> q = new PriorityQueue<>();
        
        for(int i = 0; i < nums.length; i++){
            q.add(nums[i]);
            if(q.size() > k){
                q.poll();
            }
        }
        
        return q.poll();
    }
}


method 3: sort
class Solution {
    public int findKthLargest(int[] nums, int k) {
        Arrays.sort(nums);
        return nums[nums.length - k];
    }
}

